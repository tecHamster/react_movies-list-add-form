{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","isValidURL","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","pattern","hasURLError","test","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isValidImgUrl","setIsValidImgUrl","isValidImdbUrl","setIsValidImdbUrl","hasURLErrors","onSubmit","preventDefault","prevCount","disabled","trim","App","moviesFromServer","preparedMovies","setPreparedMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bdb7a6d8.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  isValidURL?: (newValue: boolean) => void\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  isValidURL = () => {},\n  onChange = () => { },\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  const hasURLError = (name === 'imdbUrl' || name === 'imgUrl')\n    && (!pattern?.test(value) && value !== '');\n\n  const getErrorMessage = () => {\n    if (hasError || /^\\s+$/.test(value)) {\n      return <p className=\"help is-danger\">{`${label} is required`}</p>;\n    }\n\n    if (hasURLError) {\n      return <p className=\"help is-danger\">Enter valid URL</p>;\n    }\n\n    return '';\n  };\n\n  const handleChangeOnInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value);\n    isValidURL(hasURLError);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || hasURLError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChangeOnInput}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {getErrorMessage()}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const reset = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setCount(prevCount => prevCount + 1);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    reset();\n  };\n\n  const [isValidImgUrl, setIsValidImgUrl] = useState(false);\n  const [isValidImdbUrl, setIsValidImdbUrl] = useState(false);\n\n  const hasURLErrors = isValidImgUrl || isValidImdbUrl;\n\n  const hasErrors = () => {\n    if (!title.trim()\n      || !imgUrl.trim()\n      || !imdbUrl.trim()\n      || !imdbId.trim()\n      || hasURLErrors\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(value) => setTitle(value)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(value) => setDescription(value)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(value) => setImgUrl(value)}\n        isValidURL={value => setIsValidImgUrl(value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(value) => setImdbUrl(value)}\n        isValidURL={value => setIsValidImdbUrl(value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(value) => setImdbId(value)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={hasErrors()}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [preparedMovies, setPreparedMovies] = useState(moviesFromServer);\n\n  const onAdd = (movie: Movie) => {\n    setPreparedMovies(prevMovies => [...prevMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={preparedMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}